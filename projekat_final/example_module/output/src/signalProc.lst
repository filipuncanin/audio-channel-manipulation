1     						
2     	 0000				_SIGNALPROC_ASM	// comment if we do not want assembler processing
3     						
4     							.if defined (_SIGNALPROC_ASM)
5     						.include "example_module_mcv.h"
5      >> open include file: C:/CirrusDSP/clide/workspace/projekat_final/example_module/gen/inc/example_module_mcv.h
1+    						/*
2+    						 * This file is automatically generated by CLIDE
3+    						 *
4+    						 * MCV (Module Control Vector)
5+    						 */
6+    						.include "dsplib/meter_asm.h" 
6+     >> open include file: C:/CirrusDSP/include/dsplib/meter_asm.h
1+    							.if !defined(_meter_h_)
2+    	 0000				_meter_h_
3+    						
4+    						METER_T .struct
5+    						RMS .dw 0			#fract(1.31)
6+    						RMS_HOLD .dw 0		#fract(1.31)
7+    						PEAK .dw 0			#fract(1.31)
8+    						PEAK_HOLD .dw 0		#fract(1.31)
9+    							.endstruct
10+   						
11+   						(null)11+    >> end of include file: C:/CirrusDSP/include/dsplib/meter_asm.h
11+    >> continuing with file: C:/CirrusDSP/clide/workspace/projekat_final/example_module/gen/inc/example_module_mcv.h
7+    						.include "dsplib/response_asm.h"
7+     >> open include file: C:/CirrusDSP/include/dsplib/response_asm.h
1+    							.if !defined(_response_h_)
2+    	 0000				_response_h_
3+    						
4+    						BIQUAD_T .struct
5+    						COEF_A1 .dw 0			#fract(2.30)
6+    						COEF_A2 .dw 0			#fract(2.30)
7+    						COEF_B0 .dw 1			#fract(3.29)
8+    						COEF_B1 .dw 0			#fract(3.29)
9+    						COEF_B2 .dw 0			#fract(3.29)
10+   							.endstruct
11+   						
12+   						RESPONSE_T .struct
13+   						PRE .dw 0			#fract(7.25)
14+   						POST .dw 0			#fract(7.25)
15+   							.rept %i = 0,2
16+   						BIQUAD_%i BIQUAD_T		#struct
17+    >> start of macro: .rept
1+    						BIQUAD_0 BIQUAD_T		#struct
2+    						BIQUAD_1 BIQUAD_T		#struct
3+    						BIQUAD_2 BIQUAD_T		#struct
4+    						
17+   							.endm
18+   							.endstruct
19+   							
20+   							.endif21+   						(null)21+    >> end of include file: C:/CirrusDSP/include/dsplib/response_asm.h
21+    >> continuing with file: C:/CirrusDSP/clide/workspace/projekat_final/example_module/gen/inc/example_module_mcv.h
8+    						
9+    	 0001				isDefined	 .equ 	 1
10+   						
11+   						MCV_T	.struct
12+   						enable .dw 0	 # bool	non-zero to enable this function
13+   						G1 .dw 0	 #fract(1.31)
14+   						G2 .dw 0	 #fract(1.31)
15+   							.endstruct
16+   						
17+   						
18+   	 0000				STRUCTURE_INITIALIZATION_STRNG .equ "0x1, 0x00000000, 0x00000000"
19+    >> end of include file: C:/CirrusDSP/clide/workspace/projekat_final/example_module/gen/inc/example_module_mcv.h
19+    >> continuing with file: C:/CirrusDSP/clide/workspace/projekat_final/example_module/src/signalProc.a
6     						
7     	 0010				_BLOCK_SIZE .equ 16
8     	 0000				_L_CH .equ 0
9     	 0001				_R_CH .equ 1
10    	 0002				_LS_CH .equ 2
11    	 0003				_RS_CH .equ 3
12    	 0004				_C_CH .equ 4
13    	 0005				_LFE_CH .equ 5
14    						
15    	 0000					.public _signalProcessing
16    	 0000					.extern _limiterThreshold
17    	 0000					.extern _variablesGain
18    	 0000					.extern _outputMode
19    	 0000					.extern example_module_MCV (MCV_T)
20    							
21    						 	.code_ovly 
21     >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
22    						 	
23    						 	# prema CCC2 pozivnoj konvenciji: 
24    						 	# i0 - parametar pokazivac, pIn
25    						 	# i1 - parametar pokazivac, pOut
26    	 0000				_signalProcessing:
27    							# na raspolaganju a0 a1 b0 b1 i4 i5 x0 x1 y0 y1
28    							
29    	 0000	 B2D40017		ymem[i7] = i2;	i7+=1
30    	 0001	 B3D40017		ymem[i7] = i3;	i7+=1
31    	 0002	 BAD40007		ymem[i7] = i6;	
32    							
33    	 0003	 81050010		i1 = i0 + (_R_CH * _BLOCK_SIZE)
34    	 0004	 82050020		i2 = i0 + (_LS_CH * _BLOCK_SIZE)
35    	 0005	 83050030		i3 = i0 + (_RS_CH * _BLOCK_SIZE)
36    	 0006	 84050040		i4 = i0 + (_C_CH * _BLOCK_SIZE)
37    	 0007	 85050050		i5 = i0 + (_LFE_CH * _BLOCK_SIZE)
38    							
39    	 0008	 BA4A0000		i6 = (_limiterThreshold)
40    							
41    	 0009	 89040000		a1 = xmem[_outputMode]
42    							
43    	 000A	 81000032		do(_BLOCK_SIZE), >loop
44    	 000B	 84040000			y0 = xmem[example_module_MCV.G1]
45    	 000C	 85040000			y1 = xmem[example_module_MCV.G2];
46    								# ----------------------------------------------------------------------------
47    								# first stage, apply variable gain (L and R channel processing)
48    								# *samplePtrOutL = *samplePtrInL * *variablesGainPtrL;
49    								# *samplePtrOutR = *samplePtrInR * *variablesGainPtrR;
50    	 000D	 80940000			x0 = ymem[i0]
51    	 000E	 00002404			b0 = x0 * y0
52    	 000F	 8CD40000			ymem[i0] = b0
53    								
54    	 0010	 80940001			x0 = ymem[i1] 
55    	 0011	 00002424			b0 = x0 * y1	
56    	 0012	 8CD40001			ymem[i1] = b0
57    								# ----------------------------------------------------------------------------
58    								# if (outputMode > 0)
59    	 0013	 8D7A0000			b1 = (0)
60    	 0014	 00004F29			a1 - b1
61    	 0015	 84880032			if (a < 0) jmp>end		
62    									# second stage, full wave rectifier distortion (LS and RS channel processing)
63    									# if (*samplePtrOutL < FRACT_NUM(0.0))
64    									#	*samplePtrOutLs = -*samplePtrOutL;
65    									# else
66    									#	*samplePtrOutLs = *samplePtrOutL;
67    						
68    									# if (*samplePtrOutR < FRACT_NUM(0.0))
69    									#	*samplePtrOutRs = -*samplePtrOutR;
70    									# else
71    									#	*samplePtrOutRs = *samplePtrOutR;
72    	 0016	 88940000				a0 = ymem[i0]
73    	 0017	 8C7A0000				b0 = (0)
74    	 0018	 00004F20				a0 - b0
75    	 0019	 8548001B				if (a > 0) jmp>else
76    	 001A	 00004C80					a0 = -a0
77    	 001B	 88D40002	%else:		ymem[i2] = a0
78    						
79    	 001C	 88940001				a0 = ymem[i1]
80    	 001D	 00004F20				a0 - b0
81    	 001E	 85480020				if (a > 0) jmp>else
82    	 001F	 00004C80					a0 = -a0
83    	 0020	 88D40003	%else:		ymem[i3] = a0
84    								# ----------------------------------------------------------------------------
85    								# if (outputMode > 1)
86    	 0021	 9D7A2000			fixed16(b1h) = (0x2000)	# b1 = 0.25 -> output_mode 1
87    	 0022	 00004F29			a1 - b1
88    	 0023	 84880032			if (a < 0) jmp>end
89    									# third stage, L+R=C (C channel processing)
90    									# *samplePtrOutC = saturation(*samplePtrOutL + *samplePtrOutR);
91    	 0024	 88940000				a0 = ymem[i0]
92    	 0025	 8D940011				b1 = ymem[i1];	i1+=1
93    	 0026	 184644A4				b0 = b1 + a0;	a0 = xmem[i6]
94    	 0027	 00004864				if(a0 < b0) b0 = a0
95    	 0028	 00004C80				a0 = - a0
96    	 0029	 00004824				if(a0 > b0) b0 = a0
97    						
98    	 002A	 8CD40014				ymem[i4] = b0;	i4+=1
99    									
100   									# fourth stage, LS+RS=LFE (LFE channel processing)
101   									# *samplePtrOutLfe = saturation(*samplePtrOutLs + *samplePtrOutRs);
102   	 002B	 88940012				a0 = ymem[i2];	i2+=1
103   	 002C	 8D940013				b1 = ymem[i3];	i3+=1
104   	 002D	 184644A4				b0 = b1 + a0;	a0 = xmem[i6]
105   	 002E	 00004864				if(a0 < b0) b0 = a0
106   	 002F	 00004C80				a0 = - a0
107   	 0030	 00004824				if(a0 > b0) b0 = a0
108   									
109   	 0031	 8CD40015				ymem[i5] = b0;	i5+=1
110   										
111   	 0032				%end:				
112   	 0032	 02087FFF	%loop:	i0+=1
113   							
114   	 0033	 BA940027		i6 = ymem[i7];	i7-=1
115   	 0034	 B3940027		i3 = ymem[i7];	i7-=1
116   	 0035	 B2940007		i2 = ymem[i7]
117   						
118   	 0036	 81880000		ret
119   							
120   							.endif	
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

STRUCTURE_INITIALIZATION_STRNG                                                  			  Unused String		   '0x1, 0x00000000, 0x00000000' 
_BLOCK_SIZE                                                                     					 Number				          16 (10H)
_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_C_CH                                                                           					 Number				          4 (4H)
_DSP_                                                                           			  Unused Variable		        0 (0H)
_LFE_CH                                                                         					 Number				          5 (5H)
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_LS_CH                                                                          					 Number				          2 (2H)
_L_CH                                                                           			  Unused Number				     0 (0H)
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_RS_CH                                                                          					 Number				          3 (3H)
_R_CH                                                                           					 Number				          1 (1H)
_SIGNALPROC_ASM                                                                 			  Unused Relocatable        __INIT:0000H
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
_limiterThreshold                                                               					 External   
_meter_h_                                                                       			  Unused Relocatable        __INIT:0000H
_outputMode                                                                     					 External   
_response_h_                                                                    			  Unused Relocatable        __INIT:0000H
_signalProcessing                                                               			  Public Relocatable       signalProc_GEN_0000:0000H
_variablesGain                                                                  					 External   
example_module_MCV                                                              					 External   
isDefined                                                                       			  Unused Number				      1 (1H)

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0037H	 signalProc_GEN_0000                     			 CODE_OVLY                               
